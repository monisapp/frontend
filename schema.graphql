schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Account implements Node {
  amount: Int!
  currency: String!
  icon: String

  """The ID of an object"""
  id: ID!
  isActive: Boolean
  name: String!
  type: String!
  user: User!
}

type Category implements Node {
  icon: String!

  """The ID of an object"""
  id: ID!
  name: String!
  type: String!
}

input CreateAccountInput {
  amount: Int
  currency: String
  icon: String
  name: String!
  type: String!
}

type CreateAccountPayload {
  account: Account!
}

type LoginResult {
  token: String!
  user: User!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
  passwordConfirm: String!
}

type RegisterPayload {
  token: String!
  user: User!
}

type RootMutationType {
  createAccount(input: CreateAccountInput!): CreateAccountPayload
  login(email: String!, password: String!): LoginResult
  register(input: RegisterInput!): RegisterPayload
}

type RootQueryType {
  accounts: [Account!]
  categories(type: String): [Category!]

  """Fetches an object given its ID"""
  node(
    """The id of an object."""
    id: ID!
  ): Node
  user: User
}

type User implements Node {
  email: String!

  """The ID of an object"""
  id: ID!
  isActive: Boolean
  name: String
}

