schema {
  query: RootQueryType
  mutation: RootMutationType
}

type RegisterPayload {
  token: String!
  user: User!
}

input CreateTransactionInput {
  payee: String!
  value: Int!
  transactionDate: String!
  categoryId: ID!
  accountId: ID!
  comment: String
}

type LoginResult {
  token: String!
  user: User!
}

type CreateAccountPayload {
  account: Account!
}

type Account {
  "The ID of an object"
  id: ID!

  amount: Int!

  currency: String!

  icon: String

  isActive: Boolean

  name: String!

  type: String!

  user: User!
}

interface Node {
  "The id of the object."
  id: ID!
}

type CreateTransactionPayload {
  transaction: Transaction!
}

input CreateAccountInput {
  name: String!
  type: String!
  icon: String
  currency: String
  amount: Int
}

type RootMutationType {
  login(email: String!, password: String!): LoginResult
  register(input: RegisterInput!): RegisterPayload
  createAccount(input: CreateAccountInput!): CreateAccountPayload
  createTransaction(input: CreateTransactionInput!): CreateTransactionPayload
}

type RootQueryType {
  node(
    "The id of an object."
    id: ID!
  ): Node
  transactions(accountId: ID, categoryId: ID, id: ID): [Transaction!]!
  user: User!
  accounts: [Account!]!
  categories(type: String): [Category!]
}

type Transaction {
  "The ID of an object"
  id: ID!

  payee: String!

  value: Int!

  transactionDate: String!

  comment: String

  account: Account!

  category: Category!
}

type Category {
  "The ID of an object"
  id: ID!

  name: String!

  icon: String!

  type: String!
}

input RegisterInput {
  email: String!
  password: String!
  passwordConfirm: String!
  name: String!
}

type User {
  "The ID of an object"
  id: ID!

  email: String!

  isActive: Boolean!

  name: String!
}
